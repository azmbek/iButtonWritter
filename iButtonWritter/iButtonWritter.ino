#include <OneWire.h>
#include <DallasEPROM.h>
#define RED_LED 7
#define GREEN_LED 8
#define BLUE_LED 9

#define MAX_KEY 7
OneWire onew(10);  // on pin 7
DallasEPROM de(&onew);
typedef struct Key
{
	byte address[8];
	byte page[32];
}Key, *PKey;

const Key keys[MAX_KEY + 1] = {
	{
		{ 0x14,0x63,0x1B,0x97,0x07,0x00,0x00,0x84 },
		{ 0x70,0xB6,0x0A,0x48,0x03,0x71,0xB3,0x87,0x37,0x1B,0x38,0x70,0x71,0xB3,0x3B,0xE9,0x70,0xB6,0x0A,0x48,0x03,0x71,0xB3,0x87,0x37,0x1B,0x38,0x70,0x71,0xB3,0x3B,0xE9 }

	},
	{
		{ 0x14,0xFA,0x90,0x96,0x07,0x00,0x00,0x97 },
		{ 0x68,0x0F,0x9B,0x78,0x88,0xE8,0xA0,0x86,0x8E,0x8A,0x08,0x68,0xE8,0xA0,0x3A,0x62,0x68,0x0F,0x9B,0x78,0x88,0xE8,0xA0,0x86,0x8E,0x8A,0x08,0x68,0xE8,0xA0,0x3A,0x62 }

	},
	{
		{ 0x14,0xC8,0x13,0x97,0x07,0x00,0x00,0x1E },
		{ 0x70,0x3C,0xB3,0xE8,0x0B,0xDA,0x29,0x87,0xBD,0xA2,0x98,0x70,0xDA,0x29,0x3B,0xE1,0x70,0x3C,0xB3,0xE8,0x0B,0xDA,0x29,0x87,0xBD,0xA2,0x98,0x70,0xDA,0x29,0x3B,0xE1 }

	},
	{
		{ 0x14,0xAE,0x40,0xC2,0x05,0x00,0x00,0xA2 },
		{ 0x25,0x0A,0xB4,0x2D,0x56,0xBA,0x55,0xD2,0x6B,0xA5,0x5D,0x25,0xBA,0x55,0x9F,0xD9,0x25,0x0A,0xB4,0x2D,0x56,0xBA,0x55,0xD2,0x6B,0xA5,0x5D,0x25,0xBA,0x55,0x9F,0xD9 }

	},
	{
		{ 0x14,0x13,0x11,0x97,0x07,0x00,0x00,0xA1 },
		{ 0x70,0x11,0x0B,0x18,0x09,0x01,0xA6,0x87,0x90,0x1A,0x68,0x70,0x01,0xA6,0x3F,0xE7,0x70,0x11,0x0B,0x18,0x09,0x01,0xA6,0x87,0x90,0x1A,0x68,0x70,0x01,0xA6,0x3F,0xE7 }

	},
	{
		{ 0x14,0x94,0x99,0x18,0x06,0x00,0x00,0xD3 },
		{ 0x88,0x99,0x11,0x30,0x8B,0x97,0x07,0x08,0xB9,0x70,0x70,0x88,0x97,0x07,0x56,0xF3,0x88,0x99,0x11,0x30,0x8B,0x97,0x07,0x08,0xB9,0x70,0x70,0x88,0x97,0x07,0x56,0xF3 }

	},
	{
		{ 0x14, 0xDC, 0xCB, 0x18, 0x6, 0x0, 0x0, 0x11 },
		{ 0x8D,0xBD,0xA5,0x10,0xCC,0xDC,0x45,0x08,0xCD,0xC4,0x50,0x8C,0xDC,0x45,0xE6,0xAE,0x8D,0xBD,0xA5,0x10,0xCC,0xDC,0x45,0x08,0xCD,0xC4,0x50,0x8C,0xDC,0x45,0xE6,0xAE }
	},
	{
		{ 0x14,0xC6,0x19,0x88,0x06,0x00,0x00,0xB9 },
		{ 0x80,0x9C,0x62,0x99,0x2C,0xC1,0xB0,0x98,0xCC,0x1B,0x09,0x82,0xC1,0xB0,0x7E,0x41,0x80,0x9C,0x62,0x99,0x2C,0xC1,0xB0,0x98,0xCC,0x1B,0x09,0x82,0xC1,0xB0,0x7E,0x41 }

	}
};

void setup() {
	Serial.begin(9600);
	pinMode(GREEN_LED, OUTPUT);
	pinMode(BLUE_LED, OUTPUT);
	pinMode(RED_LED, OUTPUT);

}

int findKey() {
	bool flag = false;
	int keyNumber = 0;
	for (; keyNumber < MAX_KEY; keyNumber++) {
		for (int i = 0; i < 8; i++)
		{
			if (de.getAddress()[i] != keys[keyNumber].address[i]) {
				flag = false;
				break;
			}
			flag = true;
		}
		if (flag) break;
	}
	if (flag)
		return keyNumber;
	else return -1;
}
void printData() {
	byte buffer[32];  // Holds one page of data
	int status;
	Serial.print("{ ");
	Serial.print("\n");
	Serial.print("{ ");
	for (int i = 0; i < 8; i++) {
		if (i > 0)
			Serial.print(", ");
		Serial.print("0x");
		Serial.print(de.getAddress()[i], HEX);
	}
	Serial.print("}, ");
	Serial.print("\n");
	de.readPage(buffer, 0);
	Serial.print("{ ");
	for (int i = 0; i < sizeof(buffer); i++)
	{
		if (i > 0) Serial.print(", ");
		Serial.print("0x");
		Serial.print(buffer[i], HEX);
	}
	Serial.print(" }");
	Serial.print("\n");
	Serial.print(" }");
}
void loop() {

	Key currentKey;
	if (!de.search()) {
		digitalWrite(GREEN_LED, HIGH);
		delay(200);
		digitalWrite(GREEN_LED, LOW);
		delay(200);
		return;
	}
	if (de.validAddress(de.getAddress())) {

		printData();

		int keyNumber = findKey();

		if (keyNumber == -1) {
			digitalWrite(GREEN_LED, HIGH);
			delay(200);
			digitalWrite(GREEN_LED, LOW);
			delay(200);
			digitalWrite(BLUE_LED, HIGH);
			delay(200);
			digitalWrite(BLUE_LED, LOW);
			return;
		}

		currentKey = keys[keyNumber];
		de.writePage(currentKey.page, 0);
		for (int i = 0; i < 3; i++)
		{
			digitalWrite(BLUE_LED, HIGH);
			delay(200);
			digitalWrite(BLUE_LED, LOW);
			delay(200);
		}

	}
	delay(1000);
}